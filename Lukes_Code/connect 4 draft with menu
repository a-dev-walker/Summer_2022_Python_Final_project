import numpy as np
import pygame
import sys
import math

#sys is a defualt setting referring to system, allowing me to easily quit out of game

BLUE = (0, 150, 175)
RED = (150, 75, 0)
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
YELLOW = (255, 255, 0)

ROW_COUNT = 6
COLUMN_COUNT = 7

def create_board():
    board = np.zeros((ROW_COUNT,COLUMN_COUNT))
    return board

# to allow selection to drop a piece
def drop_piece(board, row, col, piece):
    board[row][col] = piece

# Check to see if number selected to drop is valid
def is_valid_location(board, col):
    return board[ROW_COUNT-1][col] == 0

# returning the first instance the row is empty
def get_next_open_row(board, col):
    for r in range(ROW_COUNT):
        if board[r][col] == 0:
            return r

# numpy defines top left as 00 for any placement of 'objects'
# adding definition of board arranges 00 in the way we view the board, aka bottom left 
def print_board(board):
    print(np.flip(board, 0))

# winner
def winning_move(board, piece):
    # horizontal check from all starting positions for a win, subtracting 3 because 3 columns wouldn't yield a win
    for c in range(COLUMN_COUNT-3):
        for r in range(ROW_COUNT):
            if board[r][c] == piece and board[r][c+1] == piece and board[r][c+2] == piece and board[r][c+3] == piece:
                return True
                #not returning previous line or else code would break too early

    # vertical location check
    for c in range(COLUMN_COUNT):
        for r in range(ROW_COUNT-3):
            if board[r][c] == piece and board[r+1][c] == piece and board[r+2][c] == piece and board[r+3][c] == piece:
                return True

    # positively sloped diagonals check
    for c in range(COLUMN_COUNT-3):
        for r in range(ROW_COUNT-3):
            if board[r][c] == piece and board[r+1][c+1] == piece and board[r+2][c+2] == piece and board[r+3][c+3] == piece:
                return True

    # negatively sloped diagonals check
    for c in range(COLUMN_COUNT-3):
        #starts on 4th row for row count, 3rd index
        for r in range(3, ROW_COUNT):
            if board[r][c] == piece and board[r-1][c+1] == piece and board[r-2][c+2] == piece and board[r-3][c+3] == piece:
                return True

# drawing the board with pygame (tutorial on freeCODECAMP.org)
def draw_board(board):
    # c and r are numbers essentially, zero to column and row count
    for c in range(COLUMN_COUNT):
        for r in range(ROW_COUNT):
            pygame.draw.rect(screen, BLUE, (c*SQUARESIZE, r*SQUARESIZE + SQUARESIZE, SQUARESIZE, SQUARESIZE))
            # integers added due to a float error when running board due to division
            pygame.draw.circle(screen, WHITE, (int(c*SQUARESIZE + SQUARESIZE/2), int(r*SQUARESIZE + SQUARESIZE + SQUARESIZE/2)), RADIUS)
    
    for c in range(COLUMN_COUNT):
        for r in range(ROW_COUNT):        
      # indexing matrix
            if board[r][c] == 1:
                pygame.draw.circle(screen, RED, (int(c*SQUARESIZE + SQUARESIZE/2), height-int(r*SQUARESIZE + SQUARESIZE/2)), RADIUS)
            elif board[r][c] == 2:
                pygame.draw.circle(screen, YELLOW, (int(c*SQUARESIZE + SQUARESIZE/2), height-int(r*SQUARESIZE + SQUARESIZE/2)), RADIUS)       
    pygame.display.update()


board = create_board()
print_board(board)

game_over = False
turn = 0

#initialize pygame
pygame.init()

SQUARESIZE = 100
width = COLUMN_COUNT * SQUARESIZE
height = (ROW_COUNT + 1) * SQUARESIZE
size = (width, height)

RADIUS = int(SQUARESIZE/2 - 5)

#pygame.org/docs
screen = pygame.display.set_mode(size)
draw_board(board)
pygame.display.update()

# display winner
# https://coderslegacy.com/python/pygame-font/
myfont = pygame.font.SysFont('gadugi', 80)
myfont2 = pygame.font.SysFont('gadugi', 80)

menu_clock = pygame.time.Clock()
def draw_text(text, font, color, surface, x, y):
    textobj = font.render(text, 1, color)
    textrect = textobj. get_rect()
    textrect.topleft = (x, y)
    surface.blit(textobj, textrect)

# reset every frame, created for main menu buttons
click = False 

def main_menu():
    while True:
        screen.fill((WHITE))
        draw_text('Main Menu', myfont2, BLUE, screen, 200, 20)

        mx, my = pygame.mouse.get_pos()
        top_button = pygame.Rect(50,100,200,50)
        middle_button = pygame.Rect(50,200,200,50)
        if top_button.collidepoint((mx, my)):
            if click:
                main_game()
        if middle_button.collidepoint((mx, my)):
            if click:
                options_menu()
        pygame.draw.rect(screen, BLUE, top_button)
        pygame.draw.rect(screen, BLUE, middle_button)

        click = False
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:
                    click = True

        pygame.display.update()
        menu_clock.tick(60)

def main_game():
    running = True
    while running:
        
        for event in pygame.event.get():
            #allowing you to exit out
            if event.type == pygame.QUIT:
                sys.exit()
            if event.type == pygame.KEYDOWN:
                running = False
            if event.type == pygame.MOUSEMOTION:
                posx = event.pos[0]
                pygame.draw.rect(screen, BLACK, (0,0, width, SQUARESIZE))
                if turn == 0:
                    pygame.draw.circle(screen, RED, (posx, int(SQUARESIZE/2)), RADIUS)
                else:
                    pygame.draw.circle(screen, YELLOW, (posx, int(SQUARESIZE/2)), RADIUS)

            pygame.display.update()

            if event.type == pygame.MOUSEBUTTONDOWN:
                #print(event.pos)
                # Ask for player 1 input
                if turn == 0:
                    posx = event.pos[0]
                    # keep this as a whole number
                    col = int(math.floor(posx/SQUARESIZE))

                    if is_valid_location(board, col):
                        row = get_next_open_row(board,col)
                        drop_piece(board, row, col, 1)

                        if winning_move(board,1):
                            label = myfont.render("PLAYER 1 WINS!", 1, RED)
                            screen.blit(label, (40,10))
                            #estimating screen position
                            game_over = True
                    
                # Ask for player 2 input
                else:
                    posx = event.pos[0]
                    # keep this as a whole number
                    col = int(math.floor(posx/SQUARESIZE))

                    if is_valid_location(board, col):
                        row = get_next_open_row(board,col)
                        drop_piece(board, row, col, 2)

                        if winning_move(board,2):
                            label = myfont.render("PLAYER 2 WINS!", 1, YELLOW)
                            screen.blit(label, (40,10))
                            #estimating screen position
                            game_over = True
                            #add break if we dont want to see turn swtiching


                print_board(board)
                draw_board(board)

                turn += 1 
                # takes the remainder of turn and dividing it by 2, alternating turns essentially
                turn = turn % 2
                
                if game_over:
                    pygame.time.wait(10000)

def options_menu():
    running = True
    while running:
        screen.fill(BLACK)
        draw_text('Options', myfont, BLUE, screen, 200, 20)
        for event in pygame.event.get():
            #allowing you to exit out
            if event.type == pygame.QUIT:
                sys.exit()
            if event.type == pygame.KEYDOWN:
                running = False


        pygame.display.update()
        menu_clock.tick(60)
# goal is to create a matrix where we are checking to see if the position being selected has been filled (1), or is empty (0)

print(turn)

main_menu()